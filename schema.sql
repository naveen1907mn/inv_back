-- Create categories table
create table if not exists public.categories (
  id bigint generated by default as identity primary key,
  name text not null unique,
  description text,
  total_products integer default 0,
  total_quantity integer default 0,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Insert default categories
insert into public.categories (name, description) values
  ('groceries-staples', 'Essentials like rice, wheat, pulses, sugar, oil'),
  ('fruits-vegetables', 'Fresh produce â€” daily household need'),
  ('dairy-bakery', 'Milk, cheese, butter, bread, cakes'),
  ('snacks-packaged', 'Chips, biscuits, noodles, ready-to-eat items'),
  ('beverages', 'Water, juices, tea, coffee, soft drinks'),
  ('personal-care', 'Soaps, shampoos, toothpaste, hygiene products'),
  ('household', 'Detergents, cleaning supplies, tissues'),
  ('meat-seafood', 'Fresh/frozen meat and fish')
on conflict (name) do nothing;

-- Create products table with improved inventory tracking
create table if not exists public.products (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  category_id bigint references public.categories(id) on delete set null,
  brand text,
  quantity integer default 0 check (quantity >= 0),
  unit text default 'pcs' check (unit in ('pcs', 'kg', 'litre', 'box', 'pack')),
  price numeric(10, 2) not null check (price >= 0),
  discount numeric(5, 2) default 0.00 check (discount >= 0 and discount <= 100),
  expiry_date date,
  min_stock_level integer default 10,
  reorder_quantity integer default 20,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Create inventory_log table to track stock changes
create table if not exists public.inventory_log (
  id bigint generated by default as identity primary key,
  product_id bigint references public.products(id) on delete cascade,
  previous_quantity integer not null,
  new_quantity integer not null,
  change_type text not null check (change_type in ('add', 'remove', 'adjust', 'expired')),
  notes text,
  created_at timestamp with time zone default now()
);

-- Function to update category totals when product quantity changes
create or replace function update_category_totals()
returns trigger as $$
begin
  -- Update category totals when product is inserted
  if (TG_OP = 'INSERT') then
    update public.categories
    set total_products = total_products + 1,
        total_quantity = total_quantity + NEW.quantity,
        updated_at = now()
    where id = NEW.category_id;
  end if;

  -- Update category totals when product is updated
  if (TG_OP = 'UPDATE') then
    -- If category changed, update both old and new categories
    if (OLD.category_id is distinct from NEW.category_id) then
      -- Decrease old category totals
      update public.categories
      set total_products = total_products - 1,
          total_quantity = total_quantity - OLD.quantity,
          updated_at = now()
      where id = OLD.category_id;
      
      -- Increase new category totals
      update public.categories
      set total_products = total_products + 1,
          total_quantity = total_quantity + NEW.quantity,
          updated_at = now()
      where id = NEW.category_id;
    else
      -- Just update quantity difference in the same category
      update public.categories
      set total_quantity = total_quantity + (NEW.quantity - OLD.quantity),
          updated_at = now()
      where id = NEW.category_id;
    end if;
  end if;

  -- Update category totals when product is deleted
  if (TG_OP = 'DELETE') then
    update public.categories
    set total_products = total_products - 1,
        total_quantity = total_quantity - OLD.quantity,
        updated_at = now()
    where id = OLD.category_id;
  end if;

  return NEW;
end;
$$ language plpgsql;

-- Create triggers for category totals
drop trigger if exists update_category_totals_trigger on public.products;
create trigger update_category_totals_trigger
after insert or update or delete on public.products
for each row execute procedure update_category_totals();

-- Function to log inventory changes
create or replace function log_inventory_change()
returns trigger as $$
begin
  if (TG_OP = 'UPDATE' and OLD.quantity is distinct from NEW.quantity) then
    insert into public.inventory_log (
      product_id,
      previous_quantity,
      new_quantity,
      change_type,
      notes
    ) values (
      NEW.id,
      OLD.quantity,
      NEW.quantity,
      case
        when NEW.quantity > OLD.quantity then 'add'
        when NEW.quantity < OLD.quantity then 'remove'
        else 'adjust'
      end,
      case
        when NEW.quantity = 0 then 'Stock depleted'
        when NEW.quantity <= NEW.min_stock_level then 'Low stock alert'
        else 'Stock adjusted'
      end
    );
  end if;
  return NEW;
end;
$$ language plpgsql;

-- Create trigger for inventory logging
drop trigger if exists log_inventory_change_trigger on public.products;
create trigger log_inventory_change_trigger
after update on public.products
for each row execute procedure log_inventory_change();

-- Function to update updated_at column
create or replace function update_updated_at_column()
returns trigger as $$
begin
  NEW.updated_at = now();
  return NEW;
end;
$$ language plpgsql;

-- Create triggers for updated_at
drop trigger if exists set_timestamp on public.products;
create trigger set_timestamp
before update on public.products
for each row execute procedure update_updated_at_column();

drop trigger if exists set_timestamp on public.categories;
create trigger set_timestamp
before update on public.categories
for each row execute procedure update_updated_at_column();

-- Create index for better query performance
create index if not exists idx_products_category on public.products(category_id);
create index if not exists idx_products_quantity on public.products(quantity);
create index if not exists idx_inventory_log_product on public.inventory_log(product_id);
create index if not exists idx_inventory_log_date on public.inventory_log(created_at);
